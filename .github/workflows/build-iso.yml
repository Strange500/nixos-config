name: Build NixOS ISO

on:
  push:
    branches: [ main, master, ci ]
    tags:
      - 'v*'  # Trigger on version tags
      - 'release-*'  # Alternative tag pattern
  pull_request:
    branches: [ main, master, ci ]
  workflow_dispatch:

jobs:
  build-iso:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            
      - name: Build NixOS ISO
        run: |
          echo "Building NixOS ISO..."
          nix build .#nixosConfigurations.installer.config.system.build.isoImage --print-build-logs
          
      - name: Find and rename ISO
        run: |
          # Find the built ISO file in result/iso directory
          ISO_PATH=$(find result/iso -name "*.iso" -type f | head -1)
          if [ -z "$ISO_PATH" ]; then
            echo "No ISO file found in result/iso!"
            echo "Contents of result directory:"
            ls -la result/ || echo "result directory doesn't exist"
            if [ -d "result/iso" ]; then
              echo "Contents of result/iso directory:"
              ls -la result/iso/
            else
              echo "result/iso directory doesn't exist"
            fi
            exit 1
          fi
          
          echo "Found ISO: $ISO_PATH"
          
          # Create a more descriptive name
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          
          # Different naming for tags vs regular commits
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_NAME="nixos-installer-${TAG_NAME}-${COMMIT_SHA}.iso"
            echo "Building for tag: $TAG_NAME"
          else
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            NEW_NAME="nixos-installer-${COMMIT_SHA}-${TIMESTAMP}.iso"
            echo "Building for branch: ${{ github.ref_name }}"
          fi
          
          # Copy to a predictable location
          cp "$ISO_PATH" "./$NEW_NAME"
          echo "ISO_NAME=$NEW_NAME" >> $GITHUB_ENV
          echo "ISO_PATH=./$NEW_NAME" >> $GITHUB_ENV
          
          # Show file info
          ls -lh "$NEW_NAME"
          
      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: nixos-iso-${{ github.run_number }}
          path: ${{ env.ISO_PATH }}
          retention-days: 30
          
      - name: Calculate ISO checksum
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Generate checksums for the release
          sha256sum "${{ env.ISO_PATH }}" > "${{ env.ISO_PATH }}.sha256"
          md5sum "${{ env.ISO_PATH }}" > "${{ env.ISO_PATH }}.md5"
          
          echo "Generated checksums:"
          cat "${{ env.ISO_PATH }}.sha256"
          cat "${{ env.ISO_PATH }}.md5"
          
          # Add checksum files to environment
          echo "SHA256_FILE=${{ env.ISO_PATH }}.sha256" >> $GITHUB_ENV
          echo "MD5_FILE=${{ env.ISO_PATH }}.md5" >> $GITHUB_ENV
          
      - name: Extract tag information
        if: startsWith(github.ref, 'refs/tags/')
        id: tag_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Determine if this is a prerelease (contains alpha, beta, rc, or has hyphen)
          if [[ "$TAG_NAME" =~ (alpha|beta|rc) ]] || [[ "$TAG_NAME" == *-* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate release notes
        if: startsWith(github.ref, 'refs/tags/')
        id: release_notes
        run: |
          echo "## NixOS ISO Release ${{ steps.tag_info.outputs.tag_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Release Assets" >> release_notes.md
          echo "- **${{ env.ISO_NAME }}** - NixOS installer ISO image" >> release_notes.md
          echo "- **${{ env.ISO_NAME }}.sha256** - SHA256 checksum" >> release_notes.md
          echo "- **${{ env.ISO_NAME }}.md5** - MD5 checksum" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Build Information" >> release_notes.md
          echo "- **Commit:** ${{ github.sha }}" >> release_notes.md
          echo "- **Built on:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "- **NixOS Channel:** nixos-unstable" >> release_notes.md
          echo "" >> release_notes.md
          
          # Add recent changes if we can find a previous tag
          echo "### 📝 Recent Changes" >> release_notes.md
          if git describe --tags --abbrev=0 HEAD~1 2>/dev/null; then
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            echo "Changes since $PREV_TAG:" >> release_notes.md
            echo "" >> release_notes.md
            git log --oneline ${PREV_TAG}..HEAD | sed 's/^/- /' >> release_notes.md
          else
            echo "Recent commits:" >> release_notes.md
            echo "" >> release_notes.md
            git log --oneline -10 | sed 's/^/- /' >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### 🚀 Usage" >> release_notes.md
          echo "1. Download the ISO file" >> release_notes.md
          echo "2. Verify the checksum (optional but recommended)" >> release_notes.md
          echo "3. Flash to USB drive or burn to DVD" >> release_notes.md
          echo "4. Boot from the installation media" >> release_notes.md
          
          # Output for GitHub Actions
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_info.outputs.tag_name }}
          name: NixOS ISO ${{ steps.tag_info.outputs.tag_name }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          prerelease: ${{ steps.tag_info.outputs.is_prerelease }}
          files: |
            ${{ env.ISO_PATH }}
            ${{ env.SHA256_FILE }}
            ${{ env.MD5_FILE }}
          generate_release_notes: false  # We're providing our own
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
